# -*- coding: utf-8 -*-
"""Oasis Infobyte Task 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hfURSu8TtoAGXcEmpa5OepvLszxZ-JwK

NAME : SUMEET BAFNA

OASIS INFOBYTE

DATA SCIENCE INTERNSHIP

TASK 01 : IRIS FLOWER CLASSIFICATION
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

Iris_data = pd.read_csv("/content/Iris.csv",encoding = 'Latin = 1')
Iris_data

print(f"No of rows in the dataset",Iris_data.shape[0])
print(f"No of columns in the dataset",Iris_data.shape[1])

#Column Names
Iris_data.columns

Iris_data.info()

# Information of some math calculations
Iris_data.describe()

# Checking if any null value present
Iris_data.isnull()

# Checking if any duplicates rows present
duplicates = Iris_data.duplicated().sum()
print("No of duplicates rows:",duplicates)

# Target Variable Distribution
plt.figure(figsize=(6, 4))
sns.countplot(x='Species',data = Iris_data)
plt.xlabel("Species")
plt.ylabel("Count")
plt.title("Distribution of Iris Species")
plt.show()

#Visualize the realtionship between features using pairplot
plt.figure(figsize=(9,4))
sns.pairplot(Iris_data, hue='Species')
plt.title("Pairplot of Iris Dataset")
plt.show()

plt.figure(figsize=(8, 6))
numeric_columns = Iris_data.select_dtypes(include=['int64', 'float64']).columns
sns.heatmap(Iris_data[numeric_columns].corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap of Iris Dataset Features")
plt.show()

# Seperate the features: [sepal_length, sepal_width, petal_length, petal_width]
# Target Variable/Labels : [species]
X = Iris_data.drop('Species', axis=1)
y = Iris_data['Species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the model
knn = KNeighborsClassifier(n_neighbors=3)

#Training the model
knn.fit(X_train, y_train)

# Make Prediction
y_pred = knn.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy * 100,"%")
print("\n Classification Report:\n",classification_report(y_test, y_pred))
print("\n Confusion Matrix:\n",confusion_matrix(y_test, y_pred))